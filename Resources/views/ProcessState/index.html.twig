{% verbatim %}
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
		<title>Symfony Distributed Architecture</title>
		<meta name="robots" content="noindex,nofollow"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" href="https://unpkg.com/buefy/dist/buefy.min.css"/>
		<link rel="stylesheet" href="https://cdn.materialdesignicons.com/5.3.45/css/materialdesignicons.min.css"/>
		<script src="https://unpkg.com/buefy/dist/buefy.min.js"></script>
{% endverbatim %}
	{% if app.debug %}
		<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
	{% else %}
		<script src="https://cdn.jsdelivr.net/npm/vue"></script>
	{% endif %}
{% verbatim %}
		<script src="https://cdn.jsdelivr.net/npm/vue-resource"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.26.0/moment-with-locales.min.js"></script>
		<style type="text/css">
			.dropdown.is-expanded.is-mobile-modal .dropdown-menu {
				max-width: 300px;
			}
			.dropdown.is-expanded .dropdown-menu {
				width: 300px;				
			}
			.border-danger {
				border: 1px solid #ff3860;
			}
			.border-warning {
				border: 1px solid #ffdd57;
			}
			.border-success {
				border: 1px solid #23d160;
			}
			.sda-graph-subgroup > .box {
				background-color: #f5f5f5;
			}
			.sda-graph-subgroup:not(:last-child) {
				margin-bottom: 1em;
			}
			.sda-graph-process {
				cursor: pointer;
			}
			.sda-graph-process:not(:last-child) {
				margin-bottom: 0.5em;
			}
			.sda-graph-process.selected {
				font-weight: bold;
			}
		</style>
	</head>
	<body>
		<section class="section">
	    	<div class="container">
				<div id="app">
					<b-message v-if="!isMasterRunning" type="is-warning" has-icon>
						The service is not running.
					</b-message>

					<div class="tile is-ancestor">
						<div class="tile is-parent">
							<div class="tile is-child box">
								<sda-search-bar v-model="search" :processes="allProcesses" @input="load()"></sda-search-bar>
							</div>
						</div>
						<div class="tile is-4 is-parent">
							<div class="tile is-child box">
								<sda-state v-if="filteredAllProcesses" :processes="filteredAllProcesses" :disabled="!isMasterRunning" @start-group="startGroup($event)" @stop-group="stopGroup($event)" @start-all="startAll()" @stop-all="stopAll()"></sda-state>
							</div>
						</div>
						<div class="tile is-2 is-parent">
							<div class="tile is-child box">
								<b-button :disabled="!isMasterRunning" icon-left="stop-circle" expanded type="is-danger" @click="stop()">Stop service</b-button>
							</div>
						</div>
					</div>

					<b-tabs>
			            <b-tab-item label="List">
							<b-table :data="processes ? processes : []" :bordered="true" :striped="true"
								:narrowed="false" :hoverable="true" :loading="loading" :mobile-cards="true" :paginated="true"
								:total="processes ? processes.length : 0" :backend-pagination="false" :backend-sorting="true"
								:per-page="20" :current-page.sync="currentPage"
								:default-sort-direction="search.direction" :default-sort="search.sort"
								aria-next-label="Next page" aria-previous-label="Previous page"
								aria-page-label="Page" aria-current-label="Current page" @sort="setSort">
								<template slot-scope="props">

									<b-table-column field="id" label="ID" width="40" sortable numeric>
									{{ props.row.id }}
									</b-table-column>

									<b-table-column field="groupName" label="Group" width="80" sortable>
									{{ props.row.groupName }}

									</b-table-column>
									<b-table-column field="groupId" label="Group ID" sortable numeric>
									{{ props.row.groupId }}
									</b-table-column>

									<b-table-column field="host" label="Host" sortable>
									{{ props.row.host }}
									</b-table-column>

									<b-table-column field="command" label="Command" sortable>
									{{ props.row.command }}
									</b-table-column>

									<b-table-column field="startedAt" label="Start time" sortable>
									{{ props.row.startedAt }}
									</b-table-column>

									<b-table-column field="stoppedAt" label="Stop time" sortable>
									{{ props.row.stoppedAt }}
									</b-table-column>

									<b-table-column field="lastSeenAt" label="Last seen time" sortable>
									{{ props.row.lastSeenAt }}
									</b-table-column>

									<b-table-column field="output" label="Last output">
										{{ props.row.output }}
									</b-table-column>

									<b-table-column field="status" label="Status" sortable>
										<b-tag v-if="props.row.status === 'started'" type="is-success">
											{{ props.row.status }}
										</b-tag>
										<b-tag v-else-if="props.row.status === 'timedout'" type="is-warning">
											{{ props.row.status }}
										</b-tag>
										<b-tag v-else-if="props.row.status === 'stopped'" type="is-danger">
											{{ props.row.status }}
										</b-tag>
									</b-table-column>
								</template>

								<template slot="empty">
									<section class="section">
									<div class="content has-text-grey has-text-centered">
										<p>
										<b-icon icon="emoticon-sad" size="is-large">
										</b-icon>
										</p>
										<p>Nothing here.</p>
									</div>
									</section>
								</template>
							</b-table>
			            </b-tab-item>
			            <b-tab-item label="Grouped">
							<sda-graph :processes="processes"></sda-graph>
			            </b-tab-item>
					</b-tabs>
	        	</div>
			</div>
		</section>

		<script type="text/x-template" id="sda-search-bar">
			<div class="columns is-multiline">
				<div class="column is-10">
					<div class="columns is-multiline">
						<div class="column is-6">
							<b-select v-model="search.status" placeholder="Status" expanded>
								<option value=""></option>
								<option value="started">Started</option>
								<option value="timedout">Timed out</option>
								<option value="stopped">Stopped</option>
							</b-select>
						</div>
						<div class="column is-6">
							<b-field>
								<b-autocomplete
									v-model="search.group"
									expanded
									:data="groupsList"
									:open-on-focus="true"
									placeholder="Group"
									icon="select-group"
									clearable
									@select="search.group = $event">
									<template slot="empty">No results found</template>
								</b-autocomplete>
							</b-field>
						</div>
						<div class="column is-6">
							<b-field>
								<b-autocomplete
									v-model="search.host"
									expanded
									:data="hostsList"
									:open-on-focus="true"
									placeholder="Host"
									icon="server"
									clearable
									@select="search.host = $event">
									<template slot="empty">No results found</template>
								</b-autocomplete>
							</b-field>
						</div>
						<div class="column is-6">
							<b-field>
								<b-autocomplete
									v-model="search.command"
									expanded
									:data="commandsList"
									:open-on-focus="true"
									placeholder="Command"
									icon="bash"
									clearable
									@select="search.command = $event">
									<template slot="empty">No results found</template>
								</b-autocomplete>
							</b-field>
						</div>
					</div>

				</div>
				<div class="column is-2">
					<b-button @click="reset()" icon-left="close"></b-button>
					<b-button @click="$emit('input', search)" type="is-primary" icon-left="magnify"></b-button>
				</div>
			</div>
		</script>

		<script type="text/x-template" id="sda-state">
			<div>
				<div class="columns">
					<div class="column">
						<b-dropdown position="is-bottom-left" append-to-body aria-role="menu" can-close expanded ref="groupsList">
							<b-button type="is-primary" slot="trigger" icon-right="menu-down" expanded>
								Groups
							</b-button>
							<b-dropdown-item
								aria-role="menu-item"
								:focusable="false"
								custom>
								<b-collapse v-for="(group, groupName) in groupsState" :key="groupName" :open="false" class="card" animation="slide">
									<div
										slot="trigger" 
										slot-scope="props"
										class="card-header"
										role="button">
										<p class="card-header-title">
											<b-icon icon="circle" :type="group.class" size="is-small"></b-icon> {{ groupName }}
										</p>
										<a class="card-header-icon">
											<b-icon
												:icon="props.open ? 'menu-down' : 'menu-up'">
											</b-icon>
										</a>
									</div>
									<div class="card-content">
										<p v-for="(count, status) in group.statuses">
											<span v-if="status === 'started'" class="has-text-success">
												{{ status }} : {{ count }}
											</span>
											<span v-else-if="status === 'timedout'" class="has-text-warning">
												{{ status }} : {{ count }}
											</span>
											<span v-else-if="status === 'stopped'" class="has-text-danger">
												{{ status }} : {{ count }}
											</span>
										</p>
									</div>
									<footer class="card-footer" v-if="!disabled">
										<a v-if="group.statuses.started || group.statuses.timedout" class="card-footer-item has-text-danger" title="Suspend all started processes in this group" @click.stop.prevent="$refs.groupsList.toggle(); $emit('stop-group', groupName)">Suspend all</a>
										<a v-if="group.statuses.stopped" class="card-footer-item has-text-success" title="Resume all stopped processes in this group" @click.stop.prevent="$refs.groupsList.toggle(); $emit('start-group', groupName)">Resume all</a>
									</footer>
								</b-collapse>
							</b-dropdown-item>
						</b-dropdown>
					</div>
					<div class="column">
						<b-dropdown position="is-bottom-left" append-to-body aria-role="menu" can-close expanded>
							<b-button type="is-primary" slot="trigger" icon-right="menu-down" expanded>
								Hosts
							</b-button>
							<b-dropdown-item
								aria-role="menu-item"
								:focusable="false"
								custom>
								<b-collapse v-for="(host, hostName) in hostsState" :key="hostName" :open="false" class="card" animation="slide">
									<div
										slot="trigger" 
										slot-scope="props"
										class="card-header"
										role="button">
										<p class="card-header-title">
											<b-icon icon="circle" :type="host.class" size="is-small"></b-icon> {{ hostName }}
										</p>
										<a class="card-header-icon">
											<b-icon
												:icon="props.open ? 'menu-down' : 'menu-up'">
											</b-icon>
										</a>
									</div>
									<div class="card-content">
										<p v-for="(count, status) in host.statuses">
											<span v-if="status === 'started'" class="has-text-success">
												{{ status }} : {{ count }}
											</span>
											<span v-else-if="status === 'timedout'" class="has-text-warning">
												{{ status }} : {{ count }}
											</span>
											<span v-else-if="status === 'stopped'" class="has-text-danger">
												{{ status }} : {{ count }}
											</span>
										</p>
									</div>
								</b-collapse>
							</b-dropdown-item>
						</b-dropdown>
					</div>
					<div class="column">
						<b-dropdown position="is-bottom-left" append-to-body aria-role="menu" can-close expanded>
							<b-button type="is-primary" slot="trigger" icon-right="menu-down" expanded>
								Statuses
							</b-button>
							<b-dropdown-item
								aria-role="menu-item"
								:focusable="false"
								custom>
								<div v-for="(count, status) in statusesState">
									<span v-if="status === 'started'" class="has-text-success">
										{{ status }} : {{ count }}
									</span>
									<span v-else-if="status === 'timedout'" class="has-text-warning">
										{{ status }} : {{ count }}
									</span>
									<span v-else-if="status === 'stopped'" class="has-text-danger">
										{{ status }} : {{ count }}
									</span>
								</div>
							</b-dropdown-item>
						</b-dropdown>
					</div>
				</div>
				<div class="columns">
					<div class="column">
						<b-button expanded :disabled="disabled || !hasStopped" type="is-success" @click="$emit('start-all')" icon-left="play-circle">Resume all</b-button>
					</div>
					<div class="column">
						<b-button expanded :disabled="disabled || !hasStarted" type="is-danger" @click="$emit('stop-all')" icon-left="pause-circle">Suspend all</b-button>
					</div>
				</div>
			</div>
		</script>

		<script type="text/x-template" id="sda-graph-process-details">
			<div>
				<div v-if="process" class="box">
					<div :class="'subtitle is-size-6 has-text-weight-bold has-text-'+color">
						[{{ process.status }}] {{ process.command }}
					</div> 
					<div class="columns">
						<div class="column is-4 has-text-weight-bold">
							ID
						</div>
						<div class="column">
							{{ process.id }}
						</div>
					</div>
					<div class="columns">
						<div class="column is-4 has-text-weight-bold">
							Group
						</div>
						<div class="column">
							{{ process.groupName }}
						</div>
					</div>
					<div class="columns">
						<div class="column is-4 has-text-weight-bold">
							Group ID
						</div>
						<div class="column">
							{{ process.groupId }}
						</div>
					</div>
					<div class="columns">
						<div class="column is-4 has-text-weight-bold">
							Started
						</div>
						<div class="column">
							{{ process.startedAt }}
						</div>
					</div>
					<div class="columns">
						<div class="column is-4 has-text-weight-bold">
							Last seen
						</div>
						<div class="column">
							{{ process.lastSeenAt }}
						</div>
					</div>
					<div class="columns" v-if="process.status === 'stopped'">
						<div class="column is-4 has-text-weight-bold">
							Stopped
						</div>
						<div class="column">
							{{ process.stoppedAt }}
						</div>
					</div>
					<div class="columns" v-if="process.output">
						<div class="column is-4 has-text-weight-bold">
							Last output
						</div>
						<div class="column">
							{{ process.output }}
						</div>
					</div>
				</div>
			</div>
		</script>

		<script type="text/x-template" id="sda-graph">
			<div>
				<div class="columns">
					<div class="column is-3">
						<b-field label="Group by" label-position="on-border">
							<b-select v-model="groupBy" expanded>
								<option :value="1">Host + Group</option>
								<option :value="2">Group + Host</option>
							</b-select>
						</b-field>
					</div>
					<div class="column is-3">
						<b-field label="Sort by" label-position="on-border">
							<b-select v-model="sortBy" expanded>
								<option :value="1">Name ASC</option>
								<option :value="2">Name DESC</option>
								<option :value="3">Size ASC</option>
								<option :value="4">Size DESC</option>
							</b-select>
						</b-field>
					</div>
				</div>
				<hr />
				<div class="columns" @click="selectProcess(0)">
					<div class="column">
						<div class="columns is-multiline">
							<div class="column is-4" v-for="group in groupedProcesses">
								<sda-graph-group :group="group" @select="selectProcess($event)"></sda-graph-group>
							</div>
						</div>
					</div>
					<div class="column is-3">
						<sda-graph-process-details :process="selectedProcess"></sda-graph-process-details>
					</div>
				</div>
			</div>
		</script>

		<script type="text/x-template" id="sda-graph-group">
			<div class="sda-graph-group">
				<div class="has-text-centered has-text-weight-bold">
					{{ group.name }}
				</div>
				<div :class="'box border-' + color">				
					<sda-graph-subgroup v-for="(subgroup, name) in group.children" :key="group.name + '-' + name" :group="subgroup" @select="$emit('select', $event)"></sda-graph-subgroup>
				</div>
			</div>
		</script>

		<script type="text/x-template" id="sda-graph-subgroup">
			<div class="sda-graph-subgroup">
				<div class="has-text-centered has-text-weight-bold">
					{{ group.name }}
				</div>
				<div :class="'box border-' + color">
					<div v-for="process in group.processes" :class="{'sda-graph-process': true, 'selected': process.selected}" @click.stop="$emit('select', process.id)">
						<b-icon icon="circle" size="is-small" :type="{'is-danger': process.status === 'stopped' || process.status === 'error', 'is-success': process.status === 'started', 'is-warning': process.status === 'timedout' || process.status === 'stopping'}"></b-icon>
						{{ process.command }}
					</div>
				</div>
			</div>
		</script>

		<script type="application/javascript">
{% endverbatim %}
const SDA_URLS = {
	SEARCH: '{{ url('distributed_architecture_admin_search') }}',
	COMMAND: '{{ url('distributed_architecture_admin_command') }}',
};
{% if app.debug %}
Vue.config.devtools = true;
{% endif %}
{% verbatim %}

Vue.use(Buefy.default);

Vue.component('sda-search-bar', {
	data: function () {
		return {
			search: {},
		};
	},
	props: ['value', 'processes'],
	watch: {
		value: function() {
			this.search = this.value;
		}
	},
	computed: {
		hostsList: function() {
			return this.filteredList('host', this.search.host);
		},
		commandsList: function() {
			return this.filteredList('command', this.search.command);
		},
		groupsList: function() {
			return this.filteredList('groupName', this.search.group);
		},
	},
	methods: {
		filteredList: function (field, filter) {
			if(!this.processes) {
				return [];
			}
			if(!filter) {
				filter = '';
			}
			else {
				filter = filter.toLowerCase();
			}
			return this.processes
				.filter(function(process) {
					return process[field]
						.toString()
						.toLowerCase()
						.indexOf(filter) >= 0;
				})
				.map(function(process) {
					return process[field];
				})
				.reduce(function(entries, entry) {
					if(entries.indexOf(entry) === -1) {
						entries.push(entry);
					}
					return entries;
				}, [])
				.sort(function(entry1, entry2) {
					return entry1.localeCompare(entry2);
				});
		},
		reset: function() {
			this.search = {
				status: '',
				group: '',
				host: '',
				command: '',
			};
			this.$emit('input', this.search);
		}
	},
	template: '#sda-search-bar'
});

Vue.component('sda-state', {
	data: function () {
		return {};
	},
	props: ['processes', 'disabled'],
	computed: {
		groupsState: function() {
			return this.buildGroupsState();
		},
		hostsState: function() {
			return this.buildHostsState();
		},
		statusesState: function() {
			return this.buildStatusesState();
		},
		hasStopped: function() {
			if(!this.processes) {
				return false;
			}
			return this.processes.some((process) => {
				return (process.status === 'stopped');
			});
		},
		hasStarted: function() {
			if(!this.processes) {
				return false;
			}
			return this.processes.some((process) => {
				return (process.status === 'started' || process.status === 'timedout');
			});
		},
	},
	methods: {
		handleEntry(object, name, status) {
			if(!object[name]) {
				object[name] = {
					class: '',
					statuses: {}
				}
			}
			if(!object[name].statuses[status]) {
				object[name].statuses[status] = 1;
			}
			else {
				object[name].statuses[status]++;
			}

			if((object[name].statuses.started && 
				object[name].statuses.stopped) ||
				object[name].statuses.timedout) {
				
				object[name].class = 'is-warning';
			}
			else if(object[name].statuses.started) {
				object[name].class = 'is-success';
			}
			else if(object[name].statuses.stopped) {
				object[name].class = 'is-danger';
			}
		},
		buildGroupsState: function() {
			const groupsState = {};
			this.processes.forEach((process) => {
				this.handleEntry(groupsState, process.groupName, process.status);
			});

			return groupsState;
		},
		buildHostsState: function() {
			const hostsState = {};
			this.processes.forEach((process) => {
				this.handleEntry(hostsState, process.host, process.status);
			});
			return hostsState;
		},
		buildStatusesState: function() {
			const statusesState = {};
			this.processes.forEach((process) => {
				if(!statusesState[process.status]) {
					statusesState[process.status] = 1;
				}
				else {
					statusesState[process.status]++;
				}
			});
			return statusesState;
		}
	},
	template: '#sda-state'
});

Vue.component('sda-graph-process-details', {
	props: ['process'],
	computed: {
		color: function() {
			switch(this.process.status) {
				case 'started':
					return 'success';
				case 'stopped':
				case 'error':
					return 'danger';
				case 'timedout':
				case 'stopping':
					return 'warning';
			}
		}
	},
	template: '#sda-graph-process-details'
});


Vue.component('sda-graph-group', {
	props: ['group'],
	computed: {
		color: function() {
			if(this.group.processes.every(process => ['stopped', 'error'].indexOf(process.status) != -1)) {
				return 'danger';
			}
			else if(this.group.processes.every(process => process.status === 'started')) {
				return 'success';
			}
			return 'warning';
		}
	},
	template: '#sda-graph-group'
});

Vue.component('sda-graph-subgroup', {
	extends: Vue.component('sda-graph-group'),
	props: ['group'],
	template: '#sda-graph-subgroup'
});

Vue.component('sda-graph', {
	data: function () {
		return {
			selectedProcessId: 0,
			groupBy: 1,
			sortBy: 1,
		};
	},
	props: ['processes'],
	computed: {
		groupedProcesses: function() {
			return this.groupProcesses();
		},
		selectedProcess: function() {
			if(!this.selectedProcessId) {
				return null;
			}
			return this.processes.find(process => process.id === this.selectedProcessId);
		},
		group1: function() {
			switch(this.groupBy) {
				case 1:
					return 'host';
				case 2:
					return 'groupName';
			}
		},
		group2: function() {
			switch(this.groupBy) {
				case 1:
					return 'groupName';
				case 2:
					return 'host';
			}
		}
	},
	methods: {
		selectProcess: function(id) {
			this.selectedProcessId = id;
		},
		sortGroup(group1, group2) {
			switch(this.sortBy) {
				case 1:
					if(group1.name === group2.name) {
						return group1.processes.length - group2.processes.length;
					}
					return group1.name.localeCompare(group2.name);
				case 2:
					if(group1.name === group2.name) {
						return group2.processes.length - group1.processes.length;
					}
					return group2.name.localeCompare(group1.name);
				case 3:
					if(group1.processes.length === group2.processes.length) {
						return group1.name.localeCompare(group2.name);
					}
					return group1.processes.length - group2.processes.length;
				case 4:
					if(group1.processes.length === group2.processes.length) {
						return group1.name.localeCompare(group2.name);
					}
					return group2.processes.length - group1.processes.length;
			}
		},
		groupProcesses() {
			if(!this.processes || !this.processes.length) {
				return null;
			}
			const groups = [];
			this.processes.forEach((process) => {
				const key1  = process[this.group1];
				const key2  = process[this.group2];
				let group = groups.find(cgroup => cgroup.name === key1);
				if(!group) {
					group = {
						name: key1,
						class: this.group1,
						processes: [process],
						children: []
					};
					groups.push(group);
					groups.sort((group1, group2) => this.sortGroup(group1, group2));
				}
				else {
					group.processes.push(process);
				}

				let subgroup = group.children.find(cgroup => cgroup.name === key2);
				if(!subgroup) {
					subgroup = {
						name: key2,
						class: this.group2,
						processes: [{
							...process,
							selected: process.id === this.selectedProcessId
						}],
					};
					group.children.push(subgroup);
					group.children.sort((subgroup1, subgroup2) => this.sortGroup(subgroup1, subgroup2));
				}
				else {
					subgroup.processes.push({
						...process,
						selected: process.id === this.selectedProcessId
					});
				}
				subgroup.processes.sort((process1, process2) => process1.id - process2.id);
			});
			return groups;
		},
	},
	template: '#sda-graph'
});

sda_app = new Vue({
	data: function () {
		return {
			allProcessesTimer: null,
			processesTimer: null,
			search: {
				status: '',
				group: '',
				host: '',
				command: '',
				sort: 'id',
				direction: 'asc',
			},
			processes: null,
			loading: false,
			allProcesses: null,
			currentPage: 1,
		};
	},
	computed: {
		filteredAllProcesses: function() {
			if(!this.allProcesses) {
				return null;
			}
			return this.allProcesses.filter((process) => {
				return (process.groupName != 'gda::master' && process.groupName != 'gda::master::remote');
			});
		},
		isMasterRunning: function() {
			if(!this.allProcesses) {
				return false;
			}
			const masterProcess = this.allProcesses.find(process => process.groupName === 'gda::master');
			if(!masterProcess) {
				return false;
			}
			return (masterProcess.status === 'started');
		}
	},
	methods: {
		stop: function() {
			this.$buefy.dialog.confirm({
				title: 'Stop the service',
				message: 'Are you sure you want to stop the service? You will not be able to restart if from this interface.',
				confirmText: 'Stop',
				type: 'is-danger',
				hasIcon: true,
				onConfirm: () => {
					this.$http.post(SDA_URLS.COMMAND, JSON.stringify({'command': 'stop'}))
					.then(() => {
						this.$buefy.toast.open('Service is stopping');
						setTimeout(() => {
							this.loadAllProcesses();
							this.load();
						}, 1000);
					})
					.catch((response) => {
						this.handleError(response);
					});
				},
			});
		},
		startAll: function() {
			this.$buefy.dialog.confirm({
				title: 'Resume all',
				message: 'Are you sure you want to resume all suspended processes?',
				confirmText: 'Resume all',
				type: 'is-success',
				hasIcon: true,
				onConfirm: () => {
					this.$http.post(SDA_URLS.COMMAND, JSON.stringify({'command': 'start_all'}))
						.then(() => {
							this.$buefy.toast.open('All suspended processes are resuming');
							setTimeout(() => {
								this.loadAllProcesses();
								this.load();
							}, 1000);
						})
						.catch((response) => {
							this.handleError(response);
						});
				},
			});
		},
		stopAll: function() {
			this.$buefy.dialog.confirm({
				title: 'Suspend all',
				message: 'Are you sure you want to suppend all running processes?',
				confirmText: 'Suspend all',
				type: 'is-danger',
				hasIcon: true,
				onConfirm: () => {
					this.$http.post(SDA_URLS.COMMAND, JSON.stringify({'command': 'stop_all'}))
						.then(() => {
							this.$buefy.toast.open('All running processes are being suspended');
							setTimeout(() => {
								this.loadAllProcesses();
								this.load();
							}, 1000);
						})
						.catch((response) => {
							this.handleError(response);
						});
				},
			});
		},
		startGroup: function(name) {
			this.$buefy.dialog.confirm({
				title: 'Resume all in '+name,
				message: 'Are you sure you want to resume all suspended processes in '+name+'?',
				confirmText: 'Resume all',
				type: 'is-success',
				hasIcon: true,
				onConfirm: () => {
					this.$http.post(SDA_URLS.COMMAND, JSON.stringify({'command': 'start_group', 'groupName': name}))
						.then(() => {
							this.$buefy.toast.open('All suspended processes in '+name+' are resuming');
							setTimeout(() => {
								this.loadAllProcesses();
								this.load();
							}, 1000);
						})
						.catch((response) => {
							this.handleError(response);
						});
				},
			});
		},
		stopGroup: function(name) {
			this.$buefy.dialog.confirm({
				title: 'Suspend all in ' + name,
				message: 'Are you sure you want to suspend all running processes in '+name+'?',
				confirmText: 'Suspend all',
				type: 'is-danger',
				hasIcon: true,
				onConfirm: () => {
					this.$http.post(SDA_URLS.COMMAND, JSON.stringify({'command': 'stop_group', 'groupName': name}))
						.then(() => {
							this.$buefy.toast.open('All running processes in '+name+' are being suspended');
							setTimeout(() => {
								this.loadAllProcesses();
								this.load();
							}, 1000);
						})
						.catch((response) => {
							this.handleError(response);
						});
				},
			});
		},
  		setSort: function(field, order) {
			this.search.sort = field;
			this.search.direction = order;
			this.load();
		},
		displayMessage: function(message, type) {
			this.$buefy.toast.open({
				duration: 5000,
				'message': message,
				'type': type,
				position: 'is-top',
				queue: true,
			});
		},
		handleResponse: function(response) {
			if(response.data.errors) {
				this.displayMessage(response.data.errors.join('<br/>'), 'is-danger');
				return false;
			}
			if(response.data.message) {
				this.displayMessage(response.data.message, 'is-success');
			}
			return true;
		},
		handleError: function(response) {
			if(response.data) {
				this.handleResponse(response);
			}
			else if(response.statusText) {
				this.displayMessage(response.statusText);
			}
			else {
				this.displayMessage('Unknown error');
			}
		},
		loadAllProcesses: function() {
			if(this.allProcessesTimer) {
				clearTimeout(this.allProcessesTimer);
				this.allProcessesTimer = null;
			}

			// We load all processes, we don't want the search
			this.$http.post(SDA_URLS.SEARCH, JSON.stringify({'sort': ''}))
				.then((response)  => {
					if(!this.handleResponse(response)) {
						// An error
						return;
					}
					if(!response.data.data || !response.data.data.length) {
						this.allProcesses = null;
						return;
					}
					this.allProcesses = response.data.data;
				})
				.catch((response) => {
					this.handleError(response);
				})
				.finally(() => {
					this.allProcessesTimer = setTimeout(() => {
						this.loadAllProcesses();
					}, 10000);
				});
		},
		doSearch: function() {
			if(this.processesTimer) {
				clearTimeout(this.processesTimer);
				this.processesTimer = null;
			}

			return this.$http.post(SDA_URLS.SEARCH, JSON.stringify(this.search))
				.then((response) => {
					if(!this.handleResponse(response)) {
						// An error
						return;
					}
					if(!response.data.data || !response.data.data.length) {
						this.processes = null;
						return;
					}
					this.processes = response.data.data.map((process) => {
						if(process.startedAt) {
							process.startedAt = moment(process.startedAt).format('LLLL');
						}
						if(process.stoppedAt) {
							process.stoppedAt = moment(process.stoppedAt).format('LLLL');
						}
						if(process.lastSeenAt) {
							process.lastSeenAt = moment(process.lastSeenAt).format('LLLL');
						}
						return process;
					});
				})
				.catch((response) => {
					this.handleError(response);
				})
				.finally(() => {
					this.processesTimer = setTimeout(() => {
						this.doSearch();
					}, 20000);
				});
		},
		load: function() {
			this.loading = true;
			this.currentPage = 1;
			this.doSearch().finally(() => {
				this.loading = false;
			});
		},
	},
	mounted: function() {
		this.load();
		this.loadAllProcesses();
	},
	el: '#app'
});
  	  </script>
	</body>
</html>
{% endverbatim %}

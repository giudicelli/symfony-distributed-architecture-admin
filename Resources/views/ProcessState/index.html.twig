{% verbatim %}
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
		<title>Symfony Distributed Architecture</title>
		<meta name="robots" content="noindex,nofollow"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" href="https://unpkg.com/buefy/dist/buefy.min.css"/>
		<link rel="stylesheet" href="https://cdn.materialdesignicons.com/5.3.45/css/materialdesignicons.min.css"/>
		<script src="https://unpkg.com/buefy/dist/buefy.min.js"></script>
{% endverbatim %}
	{% if app.debug %}
		<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
	{% else %}
		<script src="https://cdn.jsdelivr.net/npm/vue"></script>
	{% endif %}
{% verbatim %}
		<script src="https://cdn.jsdelivr.net/npm/vue-resource"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.26.0/moment-with-locales.min.js"></script>
		<style type="text/css">
			.dropdown.is-expanded.is-mobile-modal .dropdown-menu {
				max-width: 300px;
			}
			.dropdown.is-expanded .dropdown-menu {
				width: 300px;				
			}
		</style>
	</head>
	<body>
		<section class="section">
	    	<div class="container">
				<div id="app">
					<b-message v-if="!isMasterRunning" type="is-warning" has-icon>
						The service is not running.
					</b-message>

					<div class="tile is-ancestor">
						<div class="tile is-parent">
							<div class="tile is-child box">
								<sda-search-bar v-model="search" @input="load()"></sda-search-bar>
							</div>
						</div>
						<div class="tile is-4 is-parent">
							<div class="tile is-child box">
								<sda-state v-if="filteredAllProcesses" :processes="filteredAllProcesses" :disabled="!isMasterRunning" @start-group="startGroup($event)" @stop-group="stopGroup($event)" @start-all="startAll()" @stop-all="stopAll()"></sda-state>
							</div>
						</div>
						<div class="tile is-2 is-parent">
							<div class="tile is-child box">
								<b-button :disabled="!isMasterRunning" icon-left="stop-circle" expanded type="is-danger" @click="stop()">Stop service</b-button>
							</div>
						</div>
					</div>

					<b-table :data="processes ? processes : []" :bordered="true" :striped="true"
						:narrowed="false" :hoverable="true" :loading="loading" :mobile-cards="true" :paginated="true"
						:total="total" :backend-pagination="true" :backend-sorting="true"
						:per-page="search.limit" :current-page.sync="currentPage"
						:default-sort-direction="search.direction" :default-sort="search.sort"
						aria-next-label="Next page" aria-previous-label="Previous page"
						aria-page-label="Page" aria-current-label="Current page" @sort="setSort"
						@page-change="load()">
						<template slot-scope="props">

							<b-table-column field="id" label="ID" width="40" sortable numeric>
							{{ props.row.id }}
							</b-table-column>

							<b-table-column field="groupName" label="Group" width="80" sortable>
							{{ props.row.groupName }}

							</b-table-column>
							<b-table-column field="groupId" label="Group ID" sortable numeric>
							{{ props.row.groupId }}
							</b-table-column>

							<b-table-column field="host" label="Host" sortable>
							{{ props.row.host }}
							</b-table-column>

							<b-table-column field="command" label="Command" sortable>
							{{ props.row.command }}
							</b-table-column>

							<b-table-column field="startedAt" label="Start time" sortable>
							{{ props.row.startedAt }}
							</b-table-column>

							<b-table-column field="stoppedAt" label="Stop time" sortable>
							{{ props.row.stoppedAt }}
							</b-table-column>

							<b-table-column field="lastSeenAt" label="Last seen time" sortable>
							{{ props.row.lastSeenAt }}
							</b-table-column>

							<b-table-column field="output" label="Last output">
							{{ props.row.output }}
							</b-table-column>

							<b-table-column field="status" label="Status" sortable>
								<b-tag v-if="props.row.status == 'started'" type="is-success">
									{{ props.row.status }}
								</b-tag>
								<b-tag v-else-if="props.row.status == 'timedout'" type="is-warning">
									{{ props.row.status }}
								</b-tag>
								<b-tag v-else-if="props.row.status == 'stopped'" type="is-danger">
									{{ props.row.status }}
								</b-tag>
							</b-table-column>
						</template>

						<template slot="empty">
							<section class="section">
							<div class="content has-text-grey has-text-centered">
								<p>
								<b-icon icon="emoticon-sad" size="is-large">
								</b-icon>
								</p>
								<p>Nothing here.</p>
							</div>
							</section>
						</template>
					</b-table>
	        	</div>
			</div>
		</section>

		<script type="text/x-template" id="sda-search-bar">
			<div class="columns is-multiline">
				<div class="column is-3">
					<b-select v-model="search.status" placeholder="Status" expanded>
						<option value=""></option>
						<option value="started">Started</option>
						<option value="timedout">Timed out</option>
						<option value="stopped">Stopped</option>
					</b-select>
				</div>
				<div class="column is-3">
					<b-field>
						<b-input v-model="search.group" placeholder="Group" type="search" icon="select-group" expanded></b-input>
					</b-field>
				</div>
				<div class="column is-3">
					<b-field>
						<b-input v-model="search.host" placeholder="Host" type="search" icon="server" expanded></b-input>
					</b-field>
				</div>
				<div class="column is-3">
					<b-field>
						<b-input v-model="search.command" placeholder="Command" type="search" icon="bash" expanded></b-input>
					</b-field>
				</div>
				<div class="column is-3">
					<b-button @click="reset()" icon-left="close"></b-button>
					<b-button @click="$emit('input', search)" type="is-primary" icon-left="magnify"></b-button>
				</div>
			</div>
		</script>

		<script type="text/x-template" id="sda-state">
			<div>
				<div class="columns">
					<div class="column">
						<b-dropdown position="is-bottom-left" append-to-body aria-role="menu" can-close expanded>
							<b-button type="is-primary" slot="trigger" icon-right="menu-down" expanded>
								Groups
							</b-button>
							<b-dropdown-item
								aria-role="menu-item"
								:focusable="false"
								custom>
								<b-collapse v-for="(group, groupName) in groupsState" :open="false" class="card" animation="slide">
									<div
										slot="trigger" 
										slot-scope="props"
										class="card-header"
										role="button">
										<p class="card-header-title">
											<b-icon icon="circle" :type="group.class" size="is-small"></b-icon> {{ groupName }}
										</p>
										<a class="card-header-icon">
											<b-icon
												:icon="props.open ? 'menu-down' : 'menu-up'">
											</b-icon>
										</a>
									</div>
									<div class="card-content">
										<p v-for="(count, status) in group.statuses">
											<span v-if="status == 'started'" class="has-text-success">
												{{ status }} : {{ count }}
											</span>
											<span v-else-if="status == 'timedout'" class="has-text-warning">
												{{ status }} : {{ count }}
											</span>
											<span v-else-if="status == 'stopped'" class="has-text-danger">
												{{ status }} : {{ count }}
											</span>
										</p>
									</div>
									<footer class="card-footer" v-if="!disabled">
										<a v-if="group.statuses.started || group.statuses.timedout" class="card-footer-item has-text-danger" title="Suspend all started processes in this group" @click.stop.prevent="$emit('stop-group', groupName)">Suspend all</a>
										<a v-if="group.statuses.stopped" class="card-footer-item has-text-success" title="Resume all stopped processes in this group" @click.stop.prevent="$emit('start-group', groupName)">Resume all</a>
									</footer>
								</b-collapse>
							</b-dropdown-item>
						</b-dropdown>
					</div>
					<div class="column">
						<b-dropdown position="is-bottom-left" append-to-body aria-role="menu" can-close expanded>
							<b-button type="is-primary" slot="trigger" icon-right="menu-down" expanded>
								Hosts
							</b-button>
							<b-dropdown-item
								aria-role="menu-item"
								:focusable="false"
								custom>
								<b-collapse v-for="(host, hostName) in hostsState" :open="false" class="card" animation="slide">
									<div
										slot="trigger" 
										slot-scope="props"
										class="card-header"
										role="button">
										<p class="card-header-title">
											<b-icon icon="circle" :type="host.class" size="is-small"></b-icon> {{ hostName }}
										</p>
										<a class="card-header-icon">
											<b-icon
												:icon="props.open ? 'menu-down' : 'menu-up'">
											</b-icon>
										</a>
									</div>
									<div class="card-content">
										<p v-for="(count, status) in host.statuses">
											<span v-if="status == 'started'" class="has-text-success">
												{{ status }} : {{ count }}
											</span>
											<span v-else-if="status == 'timedout'" class="has-text-warning">
												{{ status }} : {{ count }}
											</span>
											<span v-else-if="status == 'stopped'" class="has-text-danger">
												{{ status }} : {{ count }}
											</span>
										</p>
									</div>
								</b-collapse>
							</b-dropdown-item>
						</b-dropdown>
					</div>
					<div class="column">
						<b-dropdown position="is-bottom-left" append-to-body aria-role="menu" can-close expanded>
							<b-button type="is-primary" slot="trigger" icon-right="menu-down" expanded>
								Statuses
							</b-button>
							<b-dropdown-item
								aria-role="menu-item"
								:focusable="false"
								custom>
								<div v-for="(count, status) in statusesState">
									<span v-if="status == 'started'" class="has-text-success">
										{{ status }} : {{ count }}
									</span>
									<span v-else-if="status == 'timedout'" class="has-text-warning">
										{{ status }} : {{ count }}
									</span>
									<span v-else-if="status == 'stopped'" class="has-text-danger">
										{{ status }} : {{ count }}
									</span>
								</div>
							</b-dropdown-item>
						</b-dropdown>
					</div>
				</div>
				<div class="columns">
					<div class="column">
						<b-button expanded :disabled="disabled || !hasStopped" type="is-success" @click="$emit('start-all')" icon-left="play-circle">Resume all</b-button>
					</div>
					<div class="column">
						<b-button expanded :disabled="disabled || !hasStarted" type="is-danger" @click="$emit('stop-all')" icon-left="pause-circle">Suspend all</b-button>
					</div>
				</div>
			</div>
		</script>

		<script type="application/javascript">
{% endverbatim %}
const SDA_URLS = {
	SEARCH: '{{ url('distributed_architecture_admin_search') }}',
	COMMAND: '{{ url('distributed_architecture_admin_command') }}',
};
{% if app.debug %}
Vue.config.devtools = true;
{% endif %}
{% verbatim %}

Vue.use(Buefy.default);

Vue.component('sda-search-bar', {
	data: function () {
		return {
			search: {},
		};
	},
	props: ['value'],
	watch: {
		value: function() {
			this.search = this.value;
		}
	},
	methods: {
		reset: function() {
			this.search = {
				status: '',
				group: '',
				host: '',
				command: '',
			};
			this.$emit('input', this.search);
		}
	},
	template: '#sda-search-bar'
});

Vue.component('sda-state', {
	data: function () {
		return {};
	},
	props: ['processes', 'disabled'],
	computed: {
		groupsState: function() {
			return this.buildGroupsState();
		},
		hostsState: function() {
			return this.buildHostsState();
		},
		statusesState: function() {
			return this.buildStatusesState();
		},
		hasStopped: function() {
			if(!this.processes) {
				return false;
			}
			return this.processes.some((process) => {
				return (process.status == 'stopped');
			});
		},
		hasStarted: function() {
			if(!this.processes) {
				return false;
			}
			return this.processes.some((process) => {
				return (process.status == 'started' || process.status == 'timedout');
			});
		},
	},
	methods: {
		handleEntry(object, name, status) {
			if(!object[name]) {
				object[name] = {
					class: '',
					statuses: {}
				}
			}
			if(!object[name].statuses[status]) {
				object[name].statuses[status] = 1;
			}
			else {
				object[name].statuses[status]++;
			}

			if((object[name].statuses.started && 
				object[name].statuses.stopped) ||
				object[name].statuses.timedout) {
				
				object[name].class = 'is-warning';
			}
			else if(object[name].statuses.started) {
				object[name].class = 'is-success';
			}
			else if(object[name].statuses.stopped) {
				object[name].class = 'is-danger';
			}
		},
		buildGroupsState: function() {
			var groupsState = {};
			this.processes.forEach((process) => {
				this.handleEntry(groupsState, process.groupName, process.status);
			});

			return groupsState;
		},
		buildHostsState: function() {
			var hostsState = {};
			this.processes.forEach((process) => {
				this.handleEntry(hostsState, process.host, process.status);
			});
			return hostsState;
		},
		buildStatusesState: function() {
			var statusesState = {};
			this.processes.forEach((process) => {
				if(!statusesState[process.status]) {
					statusesState[process.status] = 1;
				}
				else {
					statusesState[process.status]++;
				}
			});
			return statusesState;
		}
	},
	template: '#sda-state'
});

sda_app = new Vue({
	data: function () {
		return {
			allProcessesTimer: null,
			processesTimer: null,
			search: {
				status: '',
				group: '',
				host: '',
				command: '',
				offset: 0,
				limit: 20,
				sort: 'id',
				direction: 'asc',
			},
			processes: null,
			total: 0,
			loading: false,
			allProcesses: null,
		};
	},
	computed: {
		currentPage: {
			get: function() {
			    return (this.search.offset / this.search.limit) + 1;
			},
			set: function(page) {
				this.search.offset = (page - 1) * this.search.limit;
			}
		},
		filteredAllProcesses: function() {
			if(!this.allProcesses) {
				return null;
			}
			return this.allProcesses.filter((process) => {
				return (process.groupName != 'gda::master' && process.groupName != 'gda::master::remote');
			});
		},
		isMasterRunning: function() {
			if(!this.allProcesses) {
				return false;
			}
			var masterProcess = this.allProcesses.find(process => process.groupName == 'gda::master');
			return (masterProcess.status === 'started');
		}
	},
	methods: {
		stop: function() {
			this.$buefy.dialog.confirm({
				title: 'Stop the service',
				message: 'Are you sure you want to stop the service? You will not be able to restart if from this interface.',
				confirmText: 'Stop',
				type: 'is-danger',
				hasIcon: true,
				onConfirm: () => {
					this.$http.post(SDA_URLS.COMMAND, JSON.stringify({'command': 'stop'}))
					.then(() => {
						this.$buefy.toast.open('Service is stopping');
						setTimeout(() => {
							this.loadAllProcesses();
							this.load();
						}, 1000);
					})
					.catch((response) => {
						this.handleError(response);
					});
				},
			});
		},
		startAll: function() {
			this.$buefy.dialog.confirm({
				title: 'Resume all',
				message: 'Are you sure you want to resume all suspended processes?',
				confirmText: 'Resume all',
				type: 'is-success',
				hasIcon: true,
				onConfirm: () => {
					this.$http.post(SDA_URLS.COMMAND, JSON.stringify({'command': 'start_all'}))
						.then(() => {
							this.$buefy.toast.open('All suspended processes are resuming');
							setTimeout(() => {
								this.loadAllProcesses();
								this.load();
							}, 1000);
						})
						.catch((response) => {
							this.handleError(response);
						});
				},
			});
		},
		stopAll: function() {
			this.$buefy.dialog.confirm({
				title: 'Suspend all',
				message: 'Are you sure you want to suppend all running processes?',
				confirmText: 'Suspend all',
				type: 'is-danger',
				hasIcon: true,
				onConfirm: () => {
					this.$http.post(SDA_URLS.COMMAND, JSON.stringify({'command': 'stop_all'}))
						.then(() => {
							this.$buefy.toast.open('All running processes are being suspended');
							setTimeout(() => {
								this.loadAllProcesses();
								this.load();
							}, 1000);
						})
						.catch((response) => {
							this.handleError(response);
						});
				},
			});
		},
		startGroup: function(name) {
			this.$buefy.dialog.confirm({
				title: 'Resume all in '+name,
				message: 'Are you sure you want to resume all suspended processes in '+name+'?',
				confirmText: 'Resume all',
				type: 'is-success',
				hasIcon: true,
				onConfirm: () => {
					this.$http.post(SDA_URLS.COMMAND, JSON.stringify({'command': 'start_group', 'groupName': name}))
						.then(() => {
							this.$buefy.toast.open('All suspended processes in '+name+' are resuming');
							setTimeout(() => {
								this.loadAllProcesses();
								this.load();
							}, 1000);
						})
						.catch((response) => {
							this.handleError(response);
						});
				},
			});
		},
		stopGroup: function(name) {
			this.$buefy.dialog.confirm({
				title: 'Suspend all in ' + name,
				message: 'Are you sure you want to suspend all running processes in '+name+'?',
				confirmText: 'Suspend all',
				type: 'is-danger',
				hasIcon: true,
				onConfirm: () => {
					this.$http.post(SDA_URLS.COMMAND, JSON.stringify({'command': 'stop_group', 'groupName': name}))
						.then(() => {
							this.$buefy.toast.open('All running processes in '+name+' are being suspended');
							setTimeout(() => {
								this.loadAllProcesses();
								this.load();
							}, 1000);
						})
						.catch((response) => {
							this.handleError(response);
						});
				},
			});
		},
  		setSort: function(field, order) {
			this.search.sort = field;
			this.search.direction = order;
			this.load();
		},
		displayMessage: function(message, type) {
			this.$buefy.toast.open({
				duration: 5000,
				'message': message,
				'type': type,
				position: 'is-top',
				queue: true,
			});
		},
		handleResponse: function(response) {
			if(response.data.errors) {
				this.displayMessage(response.data.errors.join('<br/>'), 'is-danger');
				return false;
			}
			if(response.data.message) {
				this.displayMessage(response.data.message, 'is-success');
			}
			return true;
		},
		handleError: function(response) {
			if(response.data) {
				this.handleResponse(response);
			}
			else if(response.statusText) {
				this.displayMessage(response.statusText);
			}
			else {
				this.displayMessage('Unknown error');
			}
		},
		loadAllProcesses: function() {
			if(this.allProcessesTimer) {
				clearTimeout(this.allProcessesTimer);
				this.allProcessesTimer = null;
			}

			// We load all processes, we don't want the search
			this.$http.post(SDA_URLS.SEARCH, JSON.stringify({'sort': '', 'limit': 0}))
				.then((response)  => {
					if(!this.handleResponse(response)) {
						// An error
						return;
					}
					this.allProcesses = response.data.data.processes;
				})
				.catch((response) => {
					this.handleError(response);
				})
				.finally(() => {
					this.allProcessesTimer = setTimeout(() => {
						this.loadAllProcesses();
					}, 10000);
				});
		},
		doSearch: function() {
			if(this.processesTimer) {
				clearTimeout(this.processesTimer);
				this.processesTimer = null;
			}

			return this.$http.post(SDA_URLS.SEARCH, JSON.stringify(this.search))
				.then((response) => {
					if(!this.handleResponse(response)) {
						// An error
						return;
					}
					this.processes = response.data.data.processes.map(function(process) {
						if(process.startedAt) {
							process.startedAt = moment(process.startedAt).format('LLLL');
						}
						if(process.stoppedAt) {
							process.stoppedAt = moment(process.stoppedAt).format('LLLL');
						}
						if(process.lastSeenAt) {
							process.lastSeenAt = moment(process.lastSeenAt).format('LLLL');
						}
						return process;
					});
					this.total = response.data.data.total;
				})
				.catch((response) => {
					this.handleError(response);
				})
				.finally(() => {
					this.processesTimer = setTimeout(() => {
						this.doSearch();
					}, 20000);
				});
		},
		load: function() {
			this.loading = true;
			this.doSearch().finally(() => {
				this.loading = false;
			});
		}
	},
	mounted: function() {
		this.load();
		this.loadAllProcesses();
	},
	el: '#app'
});
  	  </script>
	</body>
</html>
{% endverbatim %}
